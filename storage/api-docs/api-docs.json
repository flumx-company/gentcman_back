{
    "openapi": "3.0.0",
    "info": {
        "title": "Laravel Swagger Gentcmen API documentation",
        "contact": {
            "email": "nikitosnov@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/v1/admin/users": {
            "get": {
                "tags": [
                    "Admin"
                ],
                "summary": "Fetch users by query params",
                "operationId": "Fetch users by query params",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "is_admin",
                        "in": "query",
                        "description": "Fetch admins",
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    },
                    {
                        "name": "user_city",
                        "in": "query",
                        "description": "User's city",
                        "schema": {
                            "type": "string"
                        },
                        "example": "some user name"
                    },
                    {
                        "name": "user_name",
                        "in": "query",
                        "description": "User's name",
                        "schema": {
                            "type": "string"
                        },
                        "example": "some user name"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/users/{user}": {
            "get": {
                "tags": [
                    "Admin"
                ],
                "summary": "Fetch user by id",
                "operationId": "Fetch user by id",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "User's id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Entity not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Admin"
                ],
                "summary": "Remove user",
                "operationId": "Remove user",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User was deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/v1/admin/users/{user}/coupons": {
            "get": {
                "tags": [
                    "Admin"
                ],
                "summary": "Fetch user's coupons",
                "operationId": "Fetch user's coupons",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "User's id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's coupons fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Entity not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/users/create-admin": {
            "post": {
                "tags": [
                    "Admin"
                ],
                "summary": "Create a new admin",
                "operationId": "Create admin",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAdminVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Admin created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/{admin}": {
            "patch": {
                "tags": [
                    "Admin"
                ],
                "summary": "Update admin by id",
                "operationId": "Update admin by id",
                "parameters": [
                    {
                        "name": "admin",
                        "in": "path",
                        "description": "Admin id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchUpdateAdminVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Admin is updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Admin not found with provided id"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/users/{user}/manage-bonus-points": {
            "post": {
                "tags": [
                    "Admin"
                ],
                "summary": "Manage bonus points",
                "operationId": "manage bonus points",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "amount": {
                                        "title": "Amount",
                                        "description": "Status of order",
                                        "example": 200
                                    },
                                    "operation": {
                                        "title": "Operation",
                                        "description": "increment or decrement",
                                        "example": "increment"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bonus points updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Entity not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/v1/admin/users/{user}/manage-coupons": {
            "post": {
                "tags": [
                    "Admin"
                ],
                "summary": "Manage coupons",
                "operationId": "manage coupons",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Coupons for user updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Entity not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Admin"
                ],
                "summary": "Remove user's coupon",
                "operationId": "Remove user's coupon",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ids": {
                                        "title": "ids",
                                        "description": "Identifiers that should be deleted",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": [
                                            1,
                                            2,
                                            3
                                        ]
                                    },
                                    "forceDelete": {
                                        "title": "forceDelete",
                                        "description": "Identifiers that should be deleted anyway",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": [
                                            1,
                                            2,
                                            3
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Coupons for user updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/v1/client/sign-up": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Sign up in the system",
                "operationId": "Sign Up",
                "parameters": [
                    {
                        "name": "ref",
                        "in": "query",
                        "description": "Ref code",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SignUpUserVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Registered successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/v1/client/sign-in": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Sign in in the system",
                "operationId": "Sign In",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SignInUserVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Logged in successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/v1/client/send-recover-code": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Send recovery code on the email to reset password",
                "operationId": "Recover code",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SendRecoveryCodeVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Email was sent"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/v1/client/reset-password": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Recover user's password",
                "operationId": "Recover password",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResetUserPasswordVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password was updated"
                    },
                    "404": {
                        "description": "User no found for this email, Please use another email"
                    }
                }
            }
        },
        "/api/v1/client/check-exist-email": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Check if user exists by providing email address",
                "operationId": "Check if user exists by email",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "description": "The user email",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "test@gmail.com"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email don`t used in our system"
                    },
                    "400": {
                        "description": "Email already exists. Please use another email"
                    }
                }
            }
        },
        "/api/v1/client/logout": {
            "delete": {
                "tags": [
                    "Auth"
                ],
                "summary": "Make a log out",
                "operationId": "Make a log out",
                "responses": {
                    "200": {
                        "description": "User logged out successfully."
                    },
                    "400": {
                        "description": "Email already exists. Please use another email"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/banners": {
            "get": {
                "tags": [
                    "Banners"
                ],
                "summary": "Get all banners",
                "operationId": "Get all banners",
                "parameters": [
                    {
                        "name": "length",
                        "in": "query",
                        "description": "Length of data",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "random_banner",
                        "in": "query",
                        "description": "Fetch random banner",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "published",
                        "in": "query",
                        "description": "Fetch published banners or unpublished",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data received successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/client/banners/{banner}": {
            "get": {
                "tags": [
                    "Banners"
                ],
                "summary": "Get single banner by id",
                "operationId": "Get single banner",
                "parameters": [
                    {
                        "name": "banner",
                        "in": "path",
                        "description": "Banner id ",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "published",
                        "in": "query",
                        "description": "Fetch published or unpublished",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data received successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/api/v1/admin/banners": {
            "post": {
                "tags": [
                    "Banners"
                ],
                "summary": "Create banner",
                "operationId": "Create banner",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BannerVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Banner is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Banners"
                ],
                "summary": "Delete some banners items",
                "operationId": "Delete some banners items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Banner items were deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/banners/{banner}": {
            "put": {
                "tags": [
                    "Banners"
                ],
                "summary": "Update single banner by id",
                "operationId": "Update single banner",
                "parameters": [
                    {
                        "name": "banner",
                        "in": "path",
                        "description": "Banner id ",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BannerVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Banner updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Banners"
                ],
                "summary": "Delete single banner by id",
                "operationId": "Delete single banner",
                "parameters": [
                    {
                        "name": "banner",
                        "in": "path",
                        "description": "Banner id ",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Banner deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/baskets": {
            "get": {
                "tags": [
                    "Baskets"
                ],
                "summary": "Fetch bucket data",
                "operationId": "Fetch bucket data",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Basket data fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Baskets"
                ],
                "summary": "Store bucket data",
                "operationId": "Store bucket data. Accept array of items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreItemsToBucketVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Basket data stored successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Product not found with provided id"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Baskets"
                ],
                "summary": "Delete bucket items by id",
                "operationId": "Delete bucket items by id",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Basket items deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/baskets/identifiers": {
            "get": {
                "tags": [
                    "Baskets"
                ],
                "summary": "Fetch bucket identifiers",
                "operationId": "Fetch bucket identifiers",
                "responses": {
                    "200": {
                        "description": "Basket identifiers fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/baskets/{id}": {
            "put": {
                "tags": [
                    "Baskets"
                ],
                "summary": "Update bucket item by id",
                "operationId": "Update bucket item by id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Basket item id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateItemInBucketVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Basket item updated successfully"
                    },
                    "404": {
                        "description": "Basket item not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/baskets/clearAll": {
            "delete": {
                "tags": [
                    "Baskets"
                ],
                "summary": "Delete all bucket items",
                "operationId": "Delete all bucket items",
                "responses": {
                    "204": {
                        "description": "All bucket items deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/blog-categories": {
            "get": {
                "tags": [
                    "Blog Categories"
                ],
                "summary": "Display a listing of the blog categories",
                "operationId": "examplesAll",
                "responses": {
                    "200": {
                        "description": "Data received successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/admin/blog-categories": {
            "post": {
                "tags": [
                    "Blog Categories"
                ],
                "summary": "Store a BlogCategory",
                "operationId": "store",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlogCategoryVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "BlogCategory created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Blog Categories"
                ],
                "summary": "Delete some blog category items",
                "operationId": "Delete some blog category items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Blog category items deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/blog-categories/{blogCategory}": {
            "get": {
                "tags": [
                    "Blog Categories"
                ],
                "summary": "Display a BlogCategory by id",
                "operationId": "examplesOne",
                "parameters": [
                    {
                        "name": "blogCategory",
                        "in": "path",
                        "description": "Id BlogCategory",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data received successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/api/v1/admin/blog-categories/{blogCategory}": {
            "put": {
                "tags": [
                    "Blog Categories"
                ],
                "summary": "Update a BlogCategory by id",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "blogCategory",
                        "in": "path",
                        "description": "Id BlogCategory",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlogCategoryVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "BlogCategory updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Blog Categories"
                ],
                "summary": "Delete a BlogCategory by id",
                "operationId": "delete one",
                "parameters": [
                    {
                        "name": "blogCategory",
                        "in": "path",
                        "description": "Id BlogCategory",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "BlogCategory deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/v1/client/blog": {
            "get": {
                "tags": [
                    "Blog"
                ],
                "summary": "Fetch the blogs query params",
                "operationId": "Fetch by query params",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "published",
                        "in": "query",
                        "description": "Fetch published or unpublished",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "author_name",
                        "in": "query",
                        "description": "Fetch data by author name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "author_email",
                        "in": "query",
                        "description": "Fetch data by author email",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "blog_type_id",
                        "in": "query",
                        "description": "Blog type id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Category id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "actual",
                        "in": "query",
                        "description": "Get actual data",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "excludeIds",
                        "in": "query",
                        "description": "Excluded ids",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "random",
                        "in": "query",
                        "description": "Fetch random records",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data received successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/client/blog/{blog}": {
            "get": {
                "tags": [
                    "Blog"
                ],
                "summary": "Display a Blog  by id",
                "operationId": "examplesOne",
                "parameters": [
                    {
                        "name": "blog",
                        "in": "path",
                        "description": "Blog id ",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "published",
                        "in": "query",
                        "description": "Fetch published or unpublished",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data received successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/api/v1/admin/blog": {
            "post": {
                "tags": [
                    "Blog"
                ],
                "summary": "Store a blog",
                "operationId": "store",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlogVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Blog created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Blog"
                ],
                "summary": "Delete some blog items",
                "operationId": "Delete some blog items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Blog items were deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/blog/{blog}": {
            "put": {
                "tags": [
                    "Blog"
                ],
                "summary": "Update a blog by id",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "blog",
                        "in": "path",
                        "description": "Blog id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlogVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Blog updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Blog"
                ],
                "summary": "Delete a blog by id",
                "operationId": "delete one",
                "parameters": [
                    {
                        "name": "blog",
                        "in": "path",
                        "description": "Blog id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Blog deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/v1/client/coupons": {
            "get": {
                "tags": [
                    "Coupons"
                ],
                "summary": "Fetch available coupons",
                "operationId": "Fetch available coupons",
                "parameters": [
                    {
                        "name": "not_expired",
                        "in": "query",
                        "description": "Fecth not expired records",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "with_trashed",
                        "in": "query",
                        "description": "Fecth only trashed items",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "only_trashed",
                        "in": "query",
                        "description": "Fecth only trashed items",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Coupons data fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/client/coupons/{coupon}": {
            "get": {
                "tags": [
                    "Coupons"
                ],
                "summary": "Fetch coupon by id",
                "operationId": "Fetch coupon by id",
                "parameters": [
                    {
                        "name": "coupon",
                        "in": "path",
                        "description": "Coupon id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Coupon fetched successfully"
                    },
                    "404": {
                        "description": "Coupon not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/admin/coupons": {
            "post": {
                "tags": [
                    "Coupons"
                ],
                "summary": "Store a coupon",
                "operationId": "Store a coupon",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CouponVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Coupon created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Coupons"
                ],
                "summary": "Remove coupons",
                "operationId": "Remove coupons",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Coupons removed successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/coupons/{coupon}": {
            "put": {
                "tags": [
                    "Coupons"
                ],
                "summary": "Update a coupon",
                "operationId": "Update a coupon",
                "parameters": [
                    {
                        "name": "coupon",
                        "in": "path",
                        "description": "Coupon id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CouponVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Coupon updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Coupon not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Coupons"
                ],
                "summary": "Delete a coupon",
                "operationId": "Delete a coupon",
                "parameters": [
                    {
                        "name": "coupon",
                        "in": "path",
                        "description": "Coupon id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Coupon deleted successfully"
                    },
                    "404": {
                        "description": "Coupon not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/v1/admin/coupons/restore/{id}": {
            "post": {
                "tags": [
                    "Coupons"
                ],
                "summary": "Restore a coupon",
                "operationId": "Restore a coupon",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Coupon id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Coupon restored successfully"
                    },
                    "404": {
                        "description": "Coupon not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/v1/admin/coupons/soft-delete/permanent-delete": {
            "delete": {
                "tags": [
                    "Coupons"
                ],
                "summary": "Remove permanent coupons",
                "operationId": "Remove permanent coupons",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Coupons removed successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/developers": {
            "get": {
                "tags": [
                    "Developers"
                ],
                "summary": "Fetch developers with cover image",
                "operationId": "Fetch developers",
                "responses": {
                    "200": {
                        "description": "Data fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/client/developers/{developer}": {
            "get": {
                "tags": [
                    "Developers"
                ],
                "summary": "Fetch developer by id",
                "operationId": "Fetch developer by id",
                "parameters": [
                    {
                        "name": "developer",
                        "in": "path",
                        "description": "Developer's id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Developer data fetched successfully"
                    },
                    "404": {
                        "description": "Developer not found with provided it"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/admin/developers": {
            "post": {
                "tags": [
                    "Developers"
                ],
                "summary": "Create a new developer",
                "operationId": "Create developer",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDeveloperVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Developer is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Developers"
                ],
                "summary": "Delete some developer items",
                "operationId": "Delete some developer items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Developers were deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/developers/{developer}": {
            "post": {
                "tags": [
                    "Developers"
                ],
                "summary": "Update developer",
                "operationId": "Update developer",
                "parameters": [
                    {
                        "name": "developer",
                        "in": "path",
                        "description": "Developer's id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "image_reset",
                        "in": "query",
                        "description": "Reset image or not. send any value that is true",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDeveloperVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Developer is updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Developers"
                ],
                "summary": "Delete developer by id",
                "operationId": "Delete developer by id",
                "parameters": [
                    {
                        "name": "developer",
                        "in": "path",
                        "description": "Developer's id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Developer deleted successfully"
                    },
                    "404": {
                        "description": "Developer not found with provided it"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/development-ideas": {
            "get": {
                "tags": [
                    "Development ideas"
                ],
                "summary": "Fetch development ideas for client - auth user",
                "operationId": "Fetch development ideas for client - auth user",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Development ideas fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Development ideas"
                ],
                "summary": "Create development idea",
                "operationId": "Create development idea",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDevelopmentIdeaVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Development idea created successfully"
                    },
                    "404": {
                        "description": "Idea improvement not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/development-ideas": {
            "get": {
                "tags": [
                    "Development ideas"
                ],
                "summary": "Fetch development ideas for admin",
                "operationId": "Fetch development ideas for admin",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Development ideas fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Development ideas"
                ],
                "summary": "Delete development ideas items",
                "operationId": "Delete development ideas items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Development ideas deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/development-ideas/{idea}": {
            "delete": {
                "tags": [
                    "Development ideas"
                ],
                "summary": "Delete development idea by id",
                "operationId": "Delete development idea by id",
                "parameters": [
                    {
                        "name": "idea",
                        "in": "path",
                        "description": "Idea id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Development idea deleted successfully"
                    },
                    "404": {
                        "description": "Development idea not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Development ideas"
                ],
                "summary": "Patch update development-idea",
                "operationId": "Patch update development-idea",
                "parameters": [
                    {
                        "name": "idea",
                        "in": "path",
                        "description": "idea id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "status": {
                                        "title": "Status of faq",
                                        "description": "Status",
                                        "example": "received"
                                    },
                                    "message": {
                                        "title": "message of faq",
                                        "description": "message",
                                        "example": "some message"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Development-idea updated successfully"
                    },
                    "404": {
                        "description": "Development-idea not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/development-ideas/{idea}": {
            "put": {
                "tags": [
                    "Development ideas"
                ],
                "summary": "Update development-idea",
                "operationId": "Update development-idea",
                "parameters": [
                    {
                        "name": "idea",
                        "in": "path",
                        "description": "Idea id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDevelopmentIdeaVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Development idea updated successfully"
                    },
                    "404": {
                        "description": "Development idea not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/discounts/{discount}": {
            "put": {
                "tags": [
                    "Discounts"
                ],
                "summary": "Update discount by id",
                "operationId": "Update discount by id",
                "parameters": [
                    {
                        "name": "discount",
                        "in": "path",
                        "description": "Discount id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDiscountVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Discount is updated successfully"
                    },
                    "404": {
                        "description": "Entity not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/discounts/{id}": {
            "delete": {
                "tags": [
                    "Discounts"
                ],
                "summary": "Delete discount by id for product",
                "operationId": "Delete discount by id",
                "parameters": [
                    {
                        "name": "discountId",
                        "in": "path",
                        "description": "Discount id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Discount is deleted successfully"
                    },
                    "404": {
                        "description": "Entity not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/faq-categories": {
            "get": {
                "tags": [
                    "Faq Categories"
                ],
                "summary": "Fetch Faq Categories by query params",
                "operationId": "Fetch Faq Categories by query params",
                "parameters": [
                    {
                        "name": "question",
                        "in": "query",
                        "description": "Answer",
                        "schema": {
                            "type": "string"
                        },
                        "example": "some question goes here"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Faq Categories by query params fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/client/faq-categories/{faqCategory}": {
            "get": {
                "tags": [
                    "Faq Categories"
                ],
                "summary": "Fetch Faq Category by id",
                "operationId": "Fetch Faq Category by id",
                "parameters": [
                    {
                        "name": "faqCategory",
                        "in": "path",
                        "description": "Faq Category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Faq Category fetched successfully"
                    },
                    "404": {
                        "description": "Faq Category not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/admin/faq-categories": {
            "post": {
                "tags": [
                    "Faq Categories"
                ],
                "summary": "Create faq category",
                "operationId": "Create faq category",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateFaqCategoryVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Faq category is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Faq Categories"
                ],
                "summary": "Delete some faq category items",
                "operationId": "Delete some faq category items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Faq category items deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/faq-categories/{category}": {
            "put": {
                "tags": [
                    "Faq Categories"
                ],
                "summary": "Update faq category by id",
                "operationId": "Update faq category by id",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "faq category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateFaqCategoryVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Faq category is updated successfully"
                    },
                    "404": {
                        "description": "Faq Category not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Faq Categories"
                ],
                "summary": "Delete faq category by id",
                "operationId": "Delete faq category by id",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "faq category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Faq category is deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Faq Category not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/user/faq-history": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Fetch user faq history",
                "operationId": "Fetch user faq history",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Limit records",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's faq history data fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/faqs": {
            "get": {
                "tags": [
                    "Faqs"
                ],
                "summary": "Fetch faqs by query params",
                "operationId": "Fetch by query params",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "theme",
                        "in": "query",
                        "description": "Faq theme",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_name",
                        "in": "query",
                        "description": "user name goes here",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "user's email",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "status of faq",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "new|active|closed"
                    },
                    {
                        "name": "created_at",
                        "in": "query",
                        "description": "date",
                        "required": false,
                        "schema": {
                            "type": "date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data received successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Faqs"
                ],
                "summary": "Delete some faq items",
                "operationId": "Delete some faq items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Faq items were deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/faqs/{faq}": {
            "get": {
                "tags": [
                    "Faqs"
                ],
                "summary": "Fetch faqs by id",
                "operationId": "Fetch faq by id",
                "parameters": [
                    {
                        "name": "faq",
                        "in": "path",
                        "description": "Faq's id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data received successfully"
                    },
                    "404": {
                        "description": "Entity not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Faqs"
                ],
                "summary": "Update faq",
                "operationId": "Update faq",
                "parameters": [
                    {
                        "name": "faq",
                        "in": "path",
                        "description": "Faq's id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "status": {
                                        "title": "Status of faq",
                                        "description": "Status of faq",
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Faq is updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Faq not found with provided id"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/faqs/{id}": {
            "delete": {
                "tags": [
                    "Faqs"
                ],
                "summary": "Delete faq",
                "operationId": "Delete faq",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Faq's id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Faq is deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Faq not found with provided id"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/faqs": {
            "post": {
                "tags": [
                    "Faqs"
                ],
                "summary": "Create faq",
                "operationId": "Faq not found",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AnswerNotFoundVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Faq is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/faq-subcategories": {
            "get": {
                "tags": [
                    "Faq Sub Categories"
                ],
                "summary": "Fetch Faq Sub Categories",
                "operationId": "Fetch Faq SubCategories",
                "responses": {
                    "200": {
                        "description": "Faq Sub Categories fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/client/faq-subcategories/{entity}": {
            "get": {
                "tags": [
                    "Faq Sub Categories"
                ],
                "summary": "Fetch Faq Sub Category by id",
                "operationId": "Fetch Faq Sub Category by id",
                "parameters": [
                    {
                        "name": "entity",
                        "in": "path",
                        "description": "Faq Sub Category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Faq Sub Category fetched successfully"
                    },
                    "404": {
                        "description": "Faq Sub Category not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/admin/faq-categories/{category}/faq-subcategory": {
            "post": {
                "tags": [
                    "Faq Categories"
                ],
                "summary": "Create faq sub category",
                "operationId": "Create faq sub category",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "Faq category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateFaqSubCategoryVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Faq sub category is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Faq category not found with provided id"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/faq-subcategories/{id}": {
            "put": {
                "tags": [
                    "Faq Sub Categories"
                ],
                "summary": "Update faq sub category by id",
                "operationId": "Update faq sub category by id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "faq sub category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateFaqSubCategoryVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Faq sub category is updated successfully"
                    },
                    "404": {
                        "description": "Faq sub Category not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/faq-subcategories": {
            "delete": {
                "tags": [
                    "Faq Sub Categories"
                ],
                "summary": "Delete some faq sub category items",
                "operationId": "Delete some faq sub category items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Faq sub category items deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/faq-subcategories/{entity}": {
            "delete": {
                "tags": [
                    "Faq Sub Categories"
                ],
                "summary": "Delete faq sub category by id",
                "operationId": "Delete faq sub category by id",
                "parameters": [
                    {
                        "name": "entity",
                        "in": "path",
                        "description": "Faq sub category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Faq sub category is deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Faq sub Category not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/favorites": {
            "get": {
                "tags": [
                    "Favorites"
                ],
                "summary": "Fetch favorites data",
                "operationId": "Fetch bucket data",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Favorites data fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Favorites"
                ],
                "summary": "Store some favorite items",
                "operationId": "Store some favorite items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreFavoriteItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Favorite data added successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Favorites"
                ],
                "summary": "Delete favorite items by id",
                "operationId": "Delete favorite items by id",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Favorite items deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/favorites/identifiers": {
            "get": {
                "tags": [
                    "Favorites"
                ],
                "summary": "Fetch favorite identifiers",
                "operationId": "Fetch favorite identifiers",
                "responses": {
                    "200": {
                        "description": "Favorite identifiers fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/idea-improvements": {
            "get": {
                "tags": [
                    "Idea improvements"
                ],
                "summary": "Fetch idea improvements for client - auth user",
                "operationId": "Fetch idea improvements for client",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Template messages fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Idea improvements"
                ],
                "summary": "Create idea-improvement",
                "operationId": "Create idea-improvement",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateIdeaImprovementVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Idea improvement created successfully"
                    },
                    "404": {
                        "description": "Idea improvement not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/idea-improvements": {
            "get": {
                "tags": [
                    "Idea improvements"
                ],
                "summary": "Fetch idea improvements for admin",
                "operationId": "Fetch idea improvements for admin",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Template messages fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Idea improvements"
                ],
                "summary": "Delete idea improvements items",
                "operationId": "Delete idea improvements items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Idea improvements deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/idea-improvements/{improvement}": {
            "delete": {
                "tags": [
                    "Idea improvements"
                ],
                "summary": "Delete idea improvement by id",
                "operationId": "Delete idea improvement by id",
                "parameters": [
                    {
                        "name": "improvement",
                        "in": "path",
                        "description": "Improvement id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Improvement deleted successfully"
                    },
                    "404": {
                        "description": "Improvement not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Idea improvements"
                ],
                "summary": "Patch update idea-improvement",
                "operationId": "Patch update idea-improvement",
                "parameters": [
                    {
                        "name": "improvement",
                        "in": "path",
                        "description": "Improvement id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "status": {
                                        "title": "Status of faq",
                                        "description": "Status of faq",
                                        "example": "received"
                                    },
                                    "message": {
                                        "title": "message of faq",
                                        "description": "message of faq",
                                        "example": "some message"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Idea improvement updated successfully"
                    },
                    "404": {
                        "description": "Idea improvement not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/idea-improvements/{improvement}": {
            "put": {
                "tags": [
                    "Idea improvements"
                ],
                "summary": "Update idea-improvement",
                "operationId": "Update idea-improvement",
                "parameters": [
                    {
                        "name": "improvement",
                        "in": "path",
                        "description": "Improvement id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateIdeaImprovementVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Idea improvement updated successfully"
                    },
                    "404": {
                        "description": "Idea improvement not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/notifications": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Fetch all notifications. Sent to the channel",
                "operationId": "Fetch all notifications",
                "responses": {
                    "200": {
                        "description": "Notifications fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/notifications/{notification}": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Mark notification as read",
                "operationId": "Mark notification as read",
                "parameters": [
                    {
                        "name": "notification",
                        "in": "path",
                        "description": "Notification id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification marked as read successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Delete notification by id",
                "operationId": "Delete notification by id",
                "parameters": [
                    {
                        "name": "notification",
                        "in": "path",
                        "description": "Faq's id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification is deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Notification not found with provided id"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/notifications/mark/markAllNotifications": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Mark all notifications as read",
                "operationId": "Mark all notifications as read",
                "responses": {
                    "200": {
                        "description": "All notifications marked as read successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/orders": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Fetch orders",
                "operationId": "Fetch orders",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Sort by date, asc|desc",
                        "schema": {
                            "type": "string"
                        },
                        "example": "asc"
                    },
                    {
                        "name": "order_status_id",
                        "in": "query",
                        "description": "Sort by order status id (ids). Can be string or array of ids status",
                        "schema": {
                            "type": "string"
                        },
                        "example": 1
                    },
                    {
                        "name": "billing_email",
                        "in": "query",
                        "description": "Search by billing email address",
                        "schema": {
                            "type": "string"
                        },
                        "example": "billing_email"
                    },
                    {
                        "name": "billing_phone",
                        "in": "query",
                        "description": "Search by billing phone number",
                        "schema": {
                            "type": "string"
                        },
                        "example": "+380XXXXXXX"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's orders fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Orders"
                ],
                "summary": "Delete order by id or by ids of array",
                "operationId": "Delete order by id or by ids of array",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "User order deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/orders/{order}": {
            "patch": {
                "tags": [
                    "Orders"
                ],
                "summary": "Update order by id",
                "operationId": "Update order by id",
                "parameters": [
                    {
                        "name": "order",
                        "in": "path",
                        "description": "Order id",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "order_status_id": {
                                        "title": "Order status id",
                                        "description": "Status of order",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "User order deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/partners": {
            "get": {
                "tags": [
                    "Partners"
                ],
                "summary": "Fetch partners",
                "operationId": "Fetch partners",
                "responses": {
                    "200": {
                        "description": "Partners fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/client/partners/{partner}": {
            "get": {
                "tags": [
                    "Partners"
                ],
                "summary": "Fetch partner by id",
                "operationId": "Fetch partner by id",
                "parameters": [
                    {
                        "name": "partner",
                        "in": "path",
                        "description": "partner id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Partner fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Entity not found"
                    }
                }
            }
        },
        "/api/v1/admin/partners": {
            "post": {
                "tags": [
                    "Partners"
                ],
                "summary": "Create partners",
                "operationId": "Create partners",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartnerVirtualData"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Partners is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Partners"
                ],
                "summary": "Delete some partner items",
                "operationId": "Delete some partner items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Partners were deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/partners/{partner}": {
            "put": {
                "tags": [
                    "Partners"
                ],
                "summary": "Update the partners",
                "operationId": "Update the partners",
                "parameters": [
                    {
                        "name": "partner",
                        "in": "path",
                        "description": "partner id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PartnerVirtualData"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Partners is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Partners"
                ],
                "summary": "Delete partner by id",
                "operationId": "Delete partner by id",
                "parameters": [
                    {
                        "name": "partner",
                        "in": "path",
                        "description": "partner id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Partner deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Entity not found"
                    }
                }
            }
        },
        "/api/v1/client/post-offers": {
            "get": {
                "tags": [
                    "Post offers"
                ],
                "summary": "Fetch user's post offers",
                "operationId": "Fetch user's post offers",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product category fetched successfully"
                    },
                    "404": {
                        "description": "Product category not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Post offers"
                ],
                "summary": "Create post offer",
                "operationId": "Create post offer",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePostOfferVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Offer is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Offer not found with provided id"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/post-offers/{offer}": {
            "delete": {
                "tags": [
                    "Post offers"
                ],
                "summary": "Delete post offer",
                "operationId": "Delete post offer",
                "parameters": [
                    {
                        "name": "offer",
                        "in": "path",
                        "description": "Post offer id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Post offer is deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Faq not found with provided id"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Post offers"
                ],
                "summary": "Update post offer",
                "operationId": "Update post offer",
                "parameters": [
                    {
                        "name": "offer",
                        "in": "path",
                        "description": "Offer id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "status": {
                                        "title": "Status of faq",
                                        "description": "Status of faq",
                                        "example": "received"
                                    },
                                    "message": {
                                        "title": "message of faq",
                                        "description": "message of faq",
                                        "example": "some message"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Offer is updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Offer not found with provided id"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/post-offers": {
            "delete": {
                "tags": [
                    "Post offers"
                ],
                "summary": "Delete some post offer items",
                "operationId": "Delete some post offer items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Post items were deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/product-categories": {
            "get": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Fetch product categories",
                "operationId": "Fetch product categories",
                "responses": {
                    "200": {
                        "description": "Product category fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/client/product-categories/{productCategory}": {
            "get": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Fetch product category by id",
                "operationId": "Fetch product category by id",
                "parameters": [
                    {
                        "name": "productCategory",
                        "in": "path",
                        "description": "Product category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product category fetched successfully"
                    },
                    "404": {
                        "description": "Product category not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/admin/product-categories": {
            "post": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Create product category",
                "operationId": "Create product category",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProductCategoryVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product status is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Delete some product category items",
                "operationId": "Delete some product category items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Product category items deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/product-categories/{category}": {
            "put": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Update product category by id",
                "operationId": "Update product category",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "Product category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProductCategoryVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product status is updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Delete product category by id",
                "operationId": "Delete product category by id",
                "parameters": [
                    {
                        "name": "category",
                        "in": "path",
                        "description": "Product category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Product category deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/product-categories/{productCategory}/discount": {
            "post": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Create discount",
                "operationId": "Create discount",
                "parameters": [
                    {
                        "name": "productCategory",
                        "in": "path",
                        "description": "Product category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDiscountVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Discount is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/product-category-options/{productCategoryOption}": {
            "get": {
                "tags": [
                    "Product Category Options"
                ],
                "summary": "Fetch product category option by id",
                "operationId": "Fetch product category option by id",
                "parameters": [
                    {
                        "name": "productCategoryOption",
                        "in": "path",
                        "description": "Option id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product category option fetched successfully"
                    },
                    "404": {
                        "description": "Product category option not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/admin/product-categories/{categoryId}/options": {
            "post": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Create product category filter option",
                "operationId": "Create product",
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "Product category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProductCategoryOptionVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product category filter option is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/product-category-options/{option}": {
            "put": {
                "tags": [
                    "Product Category Options"
                ],
                "summary": "Update product category filter option",
                "operationId": "Update product category option",
                "parameters": [
                    {
                        "name": "option",
                        "in": "path",
                        "description": "Product category option id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProductCategoryOptionVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product category option is updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Product category option not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Product Category Options"
                ],
                "summary": "Destroy product category option",
                "operationId": "Destroy product category option",
                "parameters": [
                    {
                        "name": "option",
                        "in": "path",
                        "description": "Product category option id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Product category option is deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Product category option not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Fetch products by query params",
                "operationId": "Fetch products by query params",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "random",
                        "in": "query",
                        "description": "fetch random records",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "novelty",
                        "in": "query",
                        "description": "fetch novelty products",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "promotional_goods",
                        "in": "query",
                        "description": "fetch promotional goods",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "published",
                        "in": "query",
                        "description": "Fetch published products or unpublished",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "identifiers",
                        "in": "query",
                        "description": "ids of elements",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "order_by",
                        "in": "query",
                        "description": "Order by from expensive to cheap or from cheap to expensive 1- desc, 0 - asc",
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    },
                    {
                        "name": "product_category_id",
                        "in": "query",
                        "description": "Product category ids",
                        "schema": {
                            "type": "string"
                        },
                        "example": "1,2"
                    },
                    {
                        "name": "width_belt",
                        "in": "query",
                        "description": "Product width",
                        "schema": {
                            "type": "string"
                        },
                        "example": "40,50"
                    },
                    {
                        "name": "length_product",
                        "in": "query",
                        "description": "Product length",
                        "schema": {
                            "type": "string"
                        },
                        "example": "100,150"
                    },
                    {
                        "name": "gender",
                        "in": "query",
                        "description": "Product gender",
                        "schema": {
                            "type": "string"
                        },
                        "example": "male"
                    },
                    {
                        "name": "material",
                        "in": "query",
                        "description": "Product material",
                        "schema": {
                            "type": "string"
                        },
                        "example": ""
                    },
                    {
                        "name": "clasp_type",
                        "in": "query",
                        "description": "Product clasp type",
                        "schema": {
                            "type": "string"
                        },
                        "example": ""
                    },
                    {
                        "name": "color",
                        "in": "query",
                        "description": "Product color",
                        "schema": {
                            "type": "string"
                        },
                        "example": "blue"
                    },
                    {
                        "name": "price",
                        "in": "query",
                        "description": "Product price",
                        "schema": {
                            "type": "string"
                        },
                        "example": "100,400"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/client/products/query/popular-products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Fetch popular products",
                "operationId": "Fetch popular products",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Indicate how much you need to take. By default it takes 7 items",
                        "schema": {
                            "type": "string"
                        },
                        "example": ""
                    },
                    {
                        "name": "by_sales",
                        "in": "query",
                        "description": "Fetch popular products by sales",
                        "schema": {
                            "type": "string"
                        },
                        "example": ""
                    },
                    {
                        "name": "by_number_reviews",
                        "in": "query",
                        "description": "Fetch popular products by the number of reviews",
                        "schema": {
                            "type": "string"
                        },
                        "example": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Popular products fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/products/query/by-categories": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Fetch products by categories",
                "operationId": "Fetch products by categories",
                "parameters": [
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "category id",
                        "schema": {
                            "type": "integer"
                        },
                        "example": ""
                    },
                    {
                        "name": "common_limit",
                        "in": "query",
                        "description": "general limit for every category products",
                        "schema": {
                            "type": "integer"
                        },
                        "example": ""
                    },
                    {
                        "name": "limit_for_category",
                        "in": "query",
                        "description": "take items from specific category",
                        "schema": {
                            "type": "integer"
                        },
                        "example": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products by categories fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/products/{product}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Fetch product by id",
                "operationId": "Fetch product by id with productCategories, productStatus and product reviews",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "Product id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    },
                    {
                        "name": "published",
                        "in": "query",
                        "description": "Fetch published or unpublished",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product fetched successfully"
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/products": {
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Create product",
                "operationId": "Create product",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProductVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Product status not found with provided id"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Products"
                ],
                "summary": "Delete some product items",
                "operationId": "Delete some product items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Products were deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/products/{product}/discount": {
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Create discount",
                "operationId": "Create discount",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "Product id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDiscountVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Discount is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/products/{product}": {
            "put": {
                "tags": [
                    "Products"
                ],
                "summary": "Update product",
                "operationId": "Update product",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "Product id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProductVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product is updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Product not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Products"
                ],
                "summary": "Delete product by id",
                "operationId": "Delete product by id",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "Product id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Product deleted successfully"
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/product-statuses": {
            "get": {
                "tags": [
                    "Product Statuses"
                ],
                "summary": "Fetch product statuses",
                "operationId": "Fetch product statuses",
                "responses": {
                    "200": {
                        "description": "Product statuses fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/client/product-statuses/{status}": {
            "get": {
                "tags": [
                    "Product Statuses"
                ],
                "summary": "Fetch product statuses by id",
                "operationId": "Fetch product statuses by id",
                "parameters": [
                    {
                        "name": "status",
                        "in": "path",
                        "description": "Product status id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product statuses fetched successfully"
                    },
                    "404": {
                        "description": "Product category not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/admin/product-statuses": {
            "post": {
                "tags": [
                    "Product Statuses"
                ],
                "summary": "Create product status",
                "operationId": "Create product status",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProductStatusVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product status is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Product Statuses"
                ],
                "summary": "Delete some product status items",
                "operationId": "Delete some product status items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Product status items deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/product-statuses/{status}": {
            "put": {
                "tags": [
                    "Product Statuses"
                ],
                "summary": "Update product status by id",
                "operationId": "Uodate product status by id",
                "parameters": [
                    {
                        "name": "status",
                        "in": "path",
                        "description": "Product status id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProductStatusVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product status updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Product Statuses"
                ],
                "summary": "Delete product statuses by id",
                "operationId": "Delete product statuses by id",
                "parameters": [
                    {
                        "name": "status",
                        "in": "path",
                        "description": "Product status id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Product statuses deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/referral-programs": {
            "get": {
                "tags": [
                    "Referral programs"
                ],
                "summary": "Fetch referral programs",
                "operationId": "Fetch referral programs",
                "responses": {
                    "200": {
                        "description": "Referral programs fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/client/referral-programs/{referralProgram}": {
            "get": {
                "tags": [
                    "Referral programs"
                ],
                "summary": "Fetch referral program by id",
                "operationId": "Fetch referral program by id",
                "parameters": [
                    {
                        "name": "referralProgram",
                        "in": "path",
                        "description": "Program id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Referral program fetched successfully"
                    },
                    "404": {
                        "description": "Program not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/admin/referral-programs": {
            "post": {
                "tags": [
                    "Referral programs"
                ],
                "summary": "Create referral program",
                "operationId": "Create referral program",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateReferralProgramVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Referral program is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/referral-programs/{program}": {
            "put": {
                "tags": [
                    "Referral programs"
                ],
                "summary": "Update referral program by id",
                "operationId": "Update referral program by id",
                "parameters": [
                    {
                        "name": "program",
                        "in": "path",
                        "description": "Program id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateReferralProgramVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Referral program updated successfully"
                    },
                    "404": {
                        "description": "Program not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Referral programs"
                ],
                "summary": "Delete referral program by id",
                "operationId": "Delete referral program by id",
                "parameters": [
                    {
                        "name": "program",
                        "in": "path",
                        "description": "Program id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Referral program deleted successfully"
                    },
                    "404": {
                        "description": "Program not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/admin/referral-programs/{referralProgram}/referral-program-step": {
            "post": {
                "tags": [
                    "Referral programs"
                ],
                "summary": "Create referral program step",
                "operationId": "Create referral program step",
                "parameters": [
                    {
                        "name": "referralProgram",
                        "in": "path",
                        "description": "Entity id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateReferralProgramStepVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Referral program step created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/v1/admin/referral-program-steps/{step}": {
            "put": {
                "tags": [
                    "Referral program steps"
                ],
                "summary": "Update program step",
                "operationId": "Update program step",
                "parameters": [
                    {
                        "name": "step",
                        "in": "path",
                        "description": "Entity id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateReferralProgramStepVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Referral program step is updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Entity not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/v1/admin/referral-program-steps": {
            "delete": {
                "tags": [
                    "Referral program steps"
                ],
                "summary": "Delete some referral program step items",
                "operationId": "Delete some referral program step items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Referral program steps were deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/referral-program-steps/{program}": {
            "delete": {
                "tags": [
                    "Referral program steps"
                ],
                "summary": "Delete program step",
                "operationId": "Delete program step",
                "parameters": [
                    {
                        "name": "program",
                        "in": "path",
                        "description": "Entity id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Referral program step is deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Entity not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/v1/client/report-problem": {
            "get": {
                "tags": [
                    "Report a problem"
                ],
                "summary": "Fetch idea report problems for client",
                "operationId": "Fetch report problems for client",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Report problems fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Report a problem"
                ],
                "summary": "Report a problem",
                "operationId": "Report a problem",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReportProblemVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Report problem created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/admin/report-problem": {
            "get": {
                "tags": [
                    "Report a problem"
                ],
                "summary": "Fetch report problems",
                "operationId": "Fetch report problems",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "orderBy asc or desc",
                        "schema": {
                            "type": "string"
                        },
                        "example": "asc"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "search by status",
                        "schema": {
                            "type": "string"
                        },
                        "example": "received"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Report problems fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Report a problem"
                ],
                "summary": "Delete some report-problem items",
                "operationId": "Delete some report-problem items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Report-problems were deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/report-problem/{problem}": {
            "delete": {
                "tags": [
                    "Report a problem"
                ],
                "summary": "Delete report problem by id",
                "operationId": "Delete report problem by id",
                "parameters": [
                    {
                        "name": "problem",
                        "in": "path",
                        "description": "Report problem id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Report problem deleted successfully"
                    },
                    "404": {
                        "description": "Report problem not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Report a problem"
                ],
                "summary": "Update report problem",
                "operationId": "Update report problem",
                "parameters": [
                    {
                        "name": "problem",
                        "in": "path",
                        "description": "Report problem's id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "status": {
                                        "title": "Status of report problem",
                                        "description": "Status of report problem",
                                        "example": "received"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Report problem is updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Report problem not found with provided id"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/products/{product}/reviews": {
            "get": {
                "tags": [
                    "Product Reviews"
                ],
                "summary": "Fetch product reviews",
                "operationId": "Fetch product reviews",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "Product id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product reviews is fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            },
            "post": {
                "tags": [
                    "Product Reviews"
                ],
                "summary": "Create product review",
                "operationId": "Create product review",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "Product id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProductReviewVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product review is created successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/products/{product}/reviews/{review}": {
            "post": {
                "tags": [
                    "Product Reviews"
                ],
                "summary": "Update product review",
                "operationId": "Update product review",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "Product id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    },
                    {
                        "name": "review",
                        "in": "path",
                        "description": "Review id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProductReviewVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product review is updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Product Reviews"
                ],
                "summary": "Destroy product review",
                "operationId": "Destroy product review",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "Product id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    },
                    {
                        "name": "review",
                        "in": "path",
                        "description": "Review id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Product review is deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/ideas": {
            "post": {
                "tags": [
                    "Ideas"
                ],
                "summary": "Send some idea to developers",
                "operationId": "Send idea",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SendIdeaVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Email with your idea was sent successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/v1/admin/template-messages": {
            "get": {
                "tags": [
                    "Template messages"
                ],
                "summary": "Fetch template messages",
                "operationId": "Fetch template messages",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Template messages fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Template messages"
                ],
                "summary": "Create template message",
                "operationId": "Create template message",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTemplateMessageVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Template created successfully"
                    },
                    "404": {
                        "description": "Template not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Template messages"
                ],
                "summary": "Delete template message items",
                "operationId": "Delete template message items",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Templates deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/admin/template-messages/{template}": {
            "put": {
                "tags": [
                    "Template messages"
                ],
                "summary": "Update template message by id",
                "operationId": "Update template message by id",
                "parameters": [
                    {
                        "name": "template",
                        "in": "path",
                        "description": "Template id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTemplateMessageVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Template updated successfully"
                    },
                    "404": {
                        "description": "Template not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Template messages"
                ],
                "summary": "Delete template message by id",
                "operationId": "Delete template message by id",
                "parameters": [
                    {
                        "name": "template",
                        "in": "path",
                        "description": "Template id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Template deleted successfully"
                    },
                    "404": {
                        "description": "Template not found"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/user/coupons": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Fetch user coupons",
                "operationId": "Fetch user coupons",
                "responses": {
                    "200": {
                        "description": "User coupons fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Remove user coupons",
                "operationId": "Remove user coupons",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DestroySomeItemsVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User coupons removed successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/user": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Fetch user data",
                "operationId": "Fetch user data",
                "responses": {
                    "200": {
                        "description": "User data fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update user",
                "operationId": "Update user",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserVirtualBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User is updated successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Upload avatar",
                "operationId": "Upload avatar",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "avatar_image": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User avatar uploaded successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/user/remove-avatar": {
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Delete avatar",
                "operationId": "Delete avatar",
                "responses": {
                    "204": {
                        "description": "User avatar deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/user/views": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Fetch user view history",
                "operationId": "Fetch user view history",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "groupByDate",
                        "in": "query",
                        "description": "order by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User's view history data fetched successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Upload user's view history",
                "operationId": "Upload user's view history",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "product_ids": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": [
                                            10,
                                            20
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User history uploaded successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Remove all user's viewable items",
                "operationId": "Remove all user's viewable items",
                "responses": {
                    "201": {
                        "description": "Viewable items deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/user/views/{viewableId}": {
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Remove view item",
                "operationId": "Remove view item",
                "parameters": [
                    {
                        "name": "viewableId",
                        "in": "path",
                        "description": "Viewable id item",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Viewable item deleted successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/client/user/coupons/{coupon}": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Buy a coupon for user",
                "operationId": "Buy a coupon for user",
                "parameters": [
                    {
                        "name": "coupon",
                        "in": "path",
                        "description": "Coupon id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Coupon assigned to user successfully"
                    },
                    "400": {
                        "description": "Something went wrong"
                    },
                    "404": {
                        "description": "Coupon not found"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "AnswerNotFoundVirtualBody": {
                "title": "Answer not found example",
                "description": "Answer not found body data",
                "required": [
                    "theme"
                ],
                "properties": {
                    "theme": {
                        "title": "theme",
                        "description": "Theme that was not found",
                        "type": "string",
                        "example": "some theme"
                    },
                    "message": {
                        "title": "message",
                        "description": "Message of faq",
                        "type": "string",
                        "example": "some message"
                    },
                    "content": {
                        "title": "content",
                        "description": "Content of the problem",
                        "type": "string",
                        "example": "some content goes here"
                    },
                    "email": {
                        "title": "email",
                        "description": "Client's email",
                        "type": "string",
                        "example": "test@gmail.com"
                    },
                    "name": {
                        "title": "name",
                        "description": "Client's name",
                        "type": "string",
                        "example": "some name"
                    }
                },
                "type": "object"
            },
            "BannerVirtualBody": {
                "title": "Banner body example",
                "description": "Banner body data",
                "required": [
                    "title"
                ],
                "properties": {
                    "title": {
                        "title": "title",
                        "description": "Title of banner",
                        "type": "string",
                        "example": "some title"
                    },
                    "title_color": {
                        "title": "title_color",
                        "description": "Title color of banner",
                        "type": "string",
                        "example": "some title_color"
                    },
                    "description": {
                        "title": "description",
                        "description": "Description of banner",
                        "type": "string",
                        "example": "some description"
                    },
                    "description_color": {
                        "title": "description_color",
                        "description": "Description color of banner",
                        "type": "string",
                        "example": "some description_color"
                    },
                    "button_text": {
                        "title": "button_text",
                        "description": "Button text of banner",
                        "type": "string",
                        "example": "some button_text"
                    },
                    "button_link": {
                        "title": "button_link",
                        "description": "Button link of banner",
                        "type": "string",
                        "example": "some button_link"
                    },
                    "image_link": {
                        "title": "image_link",
                        "description": "Image link of banner",
                        "type": "string",
                        "example": "some image_link"
                    },
                    "image_position": {
                        "title": "image_position",
                        "description": "Image position of banner",
                        "type": "string",
                        "example": "some image_position"
                    },
                    "text_info": {
                        "title": "text_info",
                        "description": "Text info of banner",
                        "type": "string",
                        "example": "some text_info"
                    },
                    "block_background": {
                        "title": "block_background",
                        "description": "Block bacground of banner",
                        "type": "string",
                        "example": "some block_background"
                    },
                    "button_color": {
                        "title": "button_color",
                        "description": "Button color of banner",
                        "type": "string",
                        "example": "some button_color"
                    },
                    "button_border": {
                        "title": "button_border",
                        "description": "Button border of banner",
                        "type": "string",
                        "example": "some button_border"
                    },
                    "button_background": {
                        "title": "button_background",
                        "description": "Button background of banner",
                        "type": "string",
                        "example": "some button_background"
                    },
                    "published": {
                        "title": "published",
                        "description": "published or not banner",
                        "type": "boolean",
                        "example": true
                    },
                    "template": {
                        "title": "template",
                        "description": "template of banner",
                        "type": "string",
                        "example": "something"
                    }
                },
                "type": "object"
            },
            "BlogCategoryVirtualBody": {
                "title": "Blog category store example",
                "description": "Blog category body data",
                "required": [
                    "theme"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Blog category's name",
                        "type": "string",
                        "example": "some name"
                    }
                },
                "type": "object"
            },
            "BlogVirtualBody": {
                "title": "Create blog example",
                "description": "Create blog body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "title": {
                        "title": "title",
                        "description": "Title of the new blog",
                        "type": "string",
                        "example": "some text"
                    },
                    "short_content": {
                        "title": "short_content",
                        "description": "Short content of the new blog",
                        "type": "string",
                        "example": "some content"
                    },
                    "content": {
                        "title": "content",
                        "description": "content of the blog",
                        "type": "json",
                        "example": {
                            "image_url": "f"
                        }
                    },
                    "type_id": {
                        "title": "type_id",
                        "description": "Type id of the new blog",
                        "type": "integer",
                        "example": 1
                    },
                    "category_id": {
                        "title": "category_id",
                        "description": "Category id of the new blog",
                        "type": "integer",
                        "example": 1
                    },
                    "image_title": {
                        "title": "image_title",
                        "description": "Image title",
                        "type": "integer",
                        "example": "image_title goes here"
                    },
                    "meta_title": {
                        "title": "meta_title",
                        "description": "Meta title",
                        "type": "integer",
                        "example": "meta_title goes here"
                    },
                    "meta_description": {
                        "title": "meta_description",
                        "description": "Meta description",
                        "type": "integer",
                        "example": "meta_description goes here"
                    },
                    "meta_keywords": {
                        "title": "meta_keywords",
                        "description": "Meta keywords",
                        "type": "integer",
                        "example": "meta_keywords goes here"
                    },
                    "published": {
                        "title": "published",
                        "description": "published or not banner",
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "CouponVirtualBody": {
                "title": "Create coupon example",
                "description": "Create coupon body data",
                "required": [
                    "name",
                    "cost",
                    "discount"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the coupon",
                        "type": "string",
                        "example": "some name"
                    },
                    "cost": {
                        "title": "cost",
                        "description": "Cost of the coupon",
                        "type": "integer",
                        "example": 450
                    },
                    "discount": {
                        "title": "discount",
                        "description": "discount of the coupon",
                        "type": "integer",
                        "example": 20
                    },
                    "expires_at": {
                        "title": "expires_at",
                        "description": "expires of the coupon",
                        "type": "string",
                        "format": "date"
                    },
                    "entity_type": {
                        "title": "entity_type",
                        "description": "entity type",
                        "type": "string",
                        "example": "Product|ProductCategory"
                    },
                    "entity_id": {
                        "title": "entity_id",
                        "description": "entity id",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "CreateAdminVirtualBody": {
                "title": "Store Admin request",
                "description": "Store Admin request body data",
                "required": [
                    "name",
                    "email",
                    "password"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the new user",
                        "type": "string",
                        "example": "test_user"
                    },
                    "email": {
                        "title": "email",
                        "description": "Email of the new user",
                        "type": "string",
                        "example": "test@gmail.com"
                    },
                    "password": {
                        "title": "password",
                        "description": "Password of the new user",
                        "type": "string",
                        "example": "somepassword"
                    }
                },
                "type": "object"
            },
            "CreateDeveloperVirtualBody": {
                "title": "Create faq category example",
                "description": "Create faq category body data",
                "required": [
                    "position",
                    "first_name",
                    "last_name"
                ],
                "properties": {
                    "position": {
                        "title": "position",
                        "description": "Position of developer",
                        "type": "string",
                        "example": "developer"
                    },
                    "first_name": {
                        "title": "first_name",
                        "description": "First name of developer",
                        "type": "string",
                        "example": "user's first name"
                    },
                    "last_name": {
                        "title": "last_name",
                        "description": "Last name of developer",
                        "type": "string",
                        "example": "user's last name"
                    },
                    "information": {
                        "title": "information",
                        "description": "information of developer",
                        "type": "object",
                        "example": {
                            "contact_field": "test@gmail.com"
                        }
                    },
                    "image_link": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreateDevelopmentIdeaVirtualBody": {
                "title": "Create development idea example",
                "description": "Create development idea body data",
                "required": [
                    "user_name",
                    "email",
                    "idea"
                ],
                "properties": {
                    "user_name": {
                        "title": "user_name",
                        "description": "user name who create idea improvement",
                        "type": "string",
                        "example": "user name"
                    },
                    "email": {
                        "title": "email",
                        "description": "user email who create idea improvement",
                        "type": "string",
                        "example": "test@gmail.com"
                    },
                    "idea": {
                        "title": "idea",
                        "description": "idea content",
                        "type": "string",
                        "example": "idea content goes here"
                    }
                },
                "type": "object"
            },
            "CreateDiscountVirtualBody": {
                "title": "Create discount example",
                "description": "Create discount body data",
                "required": [
                    "amount"
                ],
                "properties": {
                    "amount": {
                        "title": "amount",
                        "description": "Amount of percentage for discount",
                        "type": "integer",
                        "example": "10"
                    },
                    "expires_at": {
                        "title": "expires_at",
                        "description": "Expires at date",
                        "type": "string",
                        "example": "2021-05-25T00:00:00.000000Z"
                    }
                },
                "type": "object"
            },
            "CreateFaqCategoryVirtualBody": {
                "title": "Create faq category example",
                "description": "Create faq category body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the new faq category",
                        "type": "string",
                        "example": "some faq category"
                    }
                },
                "type": "object"
            },
            "CreateFaqSubCategoryVirtualBody": {
                "title": "Create faq sub category example",
                "description": "Create faq sub category body data",
                "required": [
                    "question",
                    "answer"
                ],
                "properties": {
                    "question": {
                        "title": "question",
                        "description": "Question of the new faq sub category",
                        "type": "string",
                        "example": "some faq sub category"
                    },
                    "answer": {
                        "title": "answer",
                        "description": "Answer of the new faq sub category",
                        "type": "string",
                        "example": "some answer"
                    }
                },
                "type": "object"
            },
            "CreateIdeaImprovementVirtualBody": {
                "title": "Create idea improvement example",
                "description": "Create idea improvement body data",
                "required": [
                    "user_name",
                    "email",
                    "improvement"
                ],
                "properties": {
                    "user_name": {
                        "title": "user_name",
                        "description": "user name who create idea improvement",
                        "type": "string",
                        "example": "user name"
                    },
                    "email": {
                        "title": "email",
                        "description": "user email who create idea improvement",
                        "type": "string",
                        "example": "test@gmail.com"
                    },
                    "improvement": {
                        "title": "improvement",
                        "description": "improvement content",
                        "type": "string",
                        "example": "improvement content goes here"
                    },
                    "theme": {
                        "title": "theme",
                        "description": "theme content",
                        "type": "string",
                        "example": "theme content goes here"
                    }
                },
                "type": "object"
            },
            "CreatePostOfferVirtualBody": {
                "title": "Create post offer example",
                "description": "Create post offer body data",
                "required": [
                    "theme",
                    "text",
                    "user_name",
                    "email"
                ],
                "properties": {
                    "theme": {
                        "title": "theme",
                        "description": "Theme of post offer",
                        "type": "string",
                        "example": "some theme"
                    },
                    "text": {
                        "title": "text",
                        "description": "Text of post offer",
                        "type": "string",
                        "example": "some text"
                    },
                    "user_name": {
                        "title": "user_name",
                        "description": "User name of post offer",
                        "type": "string",
                        "example": "some name"
                    },
                    "email": {
                        "title": "email",
                        "description": "User email of post offer",
                        "type": "string",
                        "example": "some email"
                    }
                },
                "type": "object"
            },
            "CreateProductCategoryOptionVirtualBody": {
                "title": "Create product review example",
                "description": "Create product review body data",
                "required": [
                    "option_name"
                ],
                "properties": {
                    "option_name": {
                        "title": "option_name",
                        "description": "Option name",
                        "type": "string",
                        "example": "some option name"
                    },
                    "option_values": {
                        "title": "option_values",
                        "description": "Option values",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "example": [
                            {
                                "value": 20
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "CreateProductCategoryVirtualBody": {
                "title": "Create product category example",
                "description": "Create product category body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the new product category",
                        "type": "string",
                        "example": "belts"
                    }
                },
                "type": "object"
            },
            "CreateProductReviewVirtualBody": {
                "title": "Create product review example",
                "description": "Create product review body data",
                "required": [
                    "review"
                ],
                "properties": {
                    "review": {
                        "title": "review",
                        "description": "Review of the new product review",
                        "type": "string",
                        "example": "some feedback goes here"
                    },
                    "rating": {
                        "title": "rating",
                        "description": "Reting of the new product review",
                        "type": "integer",
                        "example": "5"
                    },
                    "image[]": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "binary"
                        }
                    }
                },
                "type": "object"
            },
            "CreateProductStatusVirtualBody": {
                "title": "Create product status example",
                "description": "Create product status body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the new product status",
                        "type": "string",
                        "example": "sold"
                    }
                },
                "type": "object"
            },
            "CreateProductVirtualBody": {
                "title": "Create product example",
                "description": "Create product body data",
                "required": [
                    "name",
                    "cost",
                    "amount",
                    "description",
                    "content",
                    "status_id",
                    "category_ids[]",
                    "meta_title",
                    "meta_description",
                    "meta_keywords",
                    "banner_image"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the new product",
                        "type": "string",
                        "example": "belt"
                    },
                    "cost": {
                        "title": "cost",
                        "description": "Cost of the new product",
                        "type": "integer",
                        "example": "200"
                    },
                    "amount": {
                        "title": "amount",
                        "description": "Amount of the new product",
                        "type": "integer",
                        "example": "12"
                    },
                    "description": {
                        "title": "description",
                        "description": "Description of the new product",
                        "type": "string",
                        "example": "some description"
                    },
                    "content": {
                        "title": "content",
                        "description": "Content of the new product",
                        "type": "object",
                        "example": {
                            "width": 20,
                            "strap_length": 20
                        }
                    },
                    "images_content": {
                        "title": "images_content",
                        "description": "images_content of the new product",
                        "type": "json",
                        "example": {
                            "": 40,
                            "color": "blue",
                            "length": "100",
                            "gender": "male",
                            "belt_type": "classic",
                            "clasp_type": "classic"
                        }
                    },
                    "status_id": {
                        "title": "status_ids",
                        "description": "Identifiers of statuses for the new product",
                        "type": "integer",
                        "example": 1
                    },
                    "category_ids[]": {
                        "title": "category_ids",
                        "description": "Identifiers of categories for the new product",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "example": [
                            1
                        ]
                    },
                    "image[]": {
                        "title": "image",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "binary"
                        }
                    },
                    "meta_title": {
                        "title": "Meta title",
                        "type": "string",
                        "example": "meta title"
                    },
                    "meta_description": {
                        "title": "Meta description",
                        "type": "string",
                        "example": "meta description"
                    },
                    "meta_keywords": {
                        "title": "Meta keywords",
                        "type": "string",
                        "example": "meta keywords"
                    },
                    "banner_image": {
                        "title": "Banner image",
                        "type": "string",
                        "example": "banner image"
                    },
                    "published": {
                        "title": "published",
                        "description": "published or not banner",
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "CreateReferralProgramStepVirtualBody": {
                "title": "Referral program step example",
                "description": "Referral program step body data",
                "required": [
                    "name",
                    "goal",
                    "reward"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "name of the program step",
                        "type": "string",
                        "example": "some program step name"
                    },
                    "goal": {
                        "title": "goal",
                        "description": "goal of the program step",
                        "type": "integer",
                        "example": 2
                    },
                    "reward": {
                        "title": "reward",
                        "description": "reward of the step",
                        "type": "integer",
                        "example": 400
                    }
                },
                "type": "object"
            },
            "CreateReferralProgramVirtualBody": {
                "title": "Create referral program example",
                "description": "Create referral program body data",
                "required": [
                    "name",
                    "uri"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the referral program",
                        "type": "string",
                        "example": "Sign-up Bonus"
                    },
                    "uri": {
                        "title": "uri",
                        "description": "Uri of the referral program",
                        "type": "string",
                        "example": "api/v1/client/sign-up"
                    },
                    "lifetime_minutes": {
                        "title": "lifetime_minutes",
                        "description": "Lifetime minutes of the referral program",
                        "type": "integer",
                        "example": 200
                    },
                    "reward": {
                        "title": "reward",
                        "description": "Reward of program",
                        "type": "integer",
                        "example": 450
                    }
                },
                "type": "object"
            },
            "CreateTemplateMessageVirtualBody": {
                "title": "Create template message example",
                "description": "Create template message body data",
                "required": [
                    "type",
                    "items"
                ],
                "properties": {
                    "type": {
                        "title": "type",
                        "description": "type of template message",
                        "type": "string",
                        "example": "type"
                    },
                    "items": {
                        "title": "items",
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "example": [
                            {
                                "name": "received",
                                "message": "message"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "DestroySomeItemsVirtualBody": {
                "title": "Destroy some items example",
                "description": "Destroy some items body data",
                "required": [
                    "ids"
                ],
                "properties": {
                    "ids": {
                        "title": "ids",
                        "description": "Identifiers that should be deleted",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "example": [
                            1,
                            2,
                            3
                        ]
                    }
                },
                "type": "object"
            },
            "PartnerVirtualData": {
                "title": "Partner request body example",
                "description": "Partner request body data",
                "required": [
                    "ids"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "name of partner",
                        "type": "string",
                        "example": "some name"
                    },
                    "description": {
                        "title": "description",
                        "description": "description of partner",
                        "type": "string",
                        "example": "some description"
                    },
                    "image_link": {
                        "title": "image_link",
                        "description": "image_link of partner",
                        "type": "string",
                        "example": "image_link"
                    },
                    "site_link": {
                        "title": "site_link",
                        "description": "site_link of partner",
                        "type": "string",
                        "example": "site_link"
                    }
                },
                "type": "object"
            },
            "PatchUpdateAdminVirtualBody": {
                "title": "Update Admin request",
                "description": "Update Admin request body data",
                "required": [
                    "name",
                    "email",
                    "password"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the new user",
                        "type": "string",
                        "example": "test_user"
                    },
                    "email": {
                        "title": "email",
                        "description": "Email of the new user",
                        "type": "string",
                        "example": "test@gmail.com"
                    },
                    "password": {
                        "title": "password",
                        "description": "Password of the new user",
                        "type": "string",
                        "example": "somepassword"
                    }
                },
                "type": "object"
            },
            "ReportProblemVirtualBody": {
                "title": "Report a problem example",
                "description": "Report a problem body data",
                "required": [
                    "theme",
                    "content",
                    "message",
                    "user_email",
                    "user_name"
                ],
                "properties": {
                    "theme": {
                        "title": "theme",
                        "description": "theme of report",
                        "type": "string",
                        "example": "theme"
                    },
                    "content": {
                        "title": "content",
                        "description": "content of report",
                        "type": "string",
                        "example": "content"
                    },
                    "message": {
                        "title": "message",
                        "description": "message of report",
                        "type": "string",
                        "example": "message"
                    },
                    "user_email": {
                        "title": "user_email",
                        "description": "user email",
                        "type": "string",
                        "example": "test@gmail.com"
                    },
                    "user_name": {
                        "title": "user_name",
                        "description": "user name",
                        "type": "string",
                        "example": "test"
                    }
                },
                "type": "object"
            },
            "ResetUserPasswordVirtualBody": {
                "title": "Reset user password example",
                "description": "Update user password body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "password": {
                        "title": "password",
                        "description": "Password of the user",
                        "type": "string",
                        "example": "somepassword"
                    },
                    "confirm_password": {
                        "title": "confirm_password",
                        "description": "Confirm password of the user",
                        "type": "string",
                        "example": "somepassword"
                    },
                    "hash": {
                        "title": "hash",
                        "description": "hash code goes here",
                        "type": "string",
                        "example": "some hash"
                    }
                },
                "type": "object"
            },
            "SendIdeaVirtualBody": {
                "title": "Send idea example",
                "description": "Send idea body data",
                "required": [
                    "theme",
                    "content",
                    "user_email",
                    "user_name"
                ],
                "properties": {
                    "theme": {
                        "title": "theme",
                        "description": "theme of idea",
                        "type": "string",
                        "example": "theme"
                    },
                    "content": {
                        "title": "content",
                        "description": "content of idea",
                        "type": "string",
                        "example": "content"
                    },
                    "user_email": {
                        "title": "user_email",
                        "description": "user email",
                        "type": "string",
                        "example": "test@gmail.com"
                    },
                    "user_name": {
                        "title": "user_name",
                        "description": "user name",
                        "type": "string",
                        "example": "test"
                    }
                },
                "type": "object"
            },
            "SendRecoveryCodeVirtualBody": {
                "title": "Send recovery code request",
                "description": "Send recovery code request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "email": {
                        "title": "email",
                        "description": "Email of the user",
                        "type": "string",
                        "example": "test@gmail.com"
                    }
                },
                "type": "object"
            },
            "SignInUserVirtualBody": {
                "title": "Log in User request",
                "description": "Log in User request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "email": {
                        "title": "email",
                        "description": "Email of the user",
                        "type": "string",
                        "example": "test@gmail.com"
                    },
                    "password": {
                        "title": "password",
                        "description": "Password of the user",
                        "type": "string",
                        "example": "somepassword"
                    }
                },
                "type": "object"
            },
            "SignUpUserVirtualBody": {
                "title": "Store User request",
                "description": "Store User request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the new user",
                        "type": "string",
                        "example": "test_user"
                    },
                    "email": {
                        "title": "email",
                        "description": "Email of the new user",
                        "type": "string",
                        "example": "test@gmail.com"
                    },
                    "password": {
                        "title": "password",
                        "description": "Password of the new user",
                        "type": "string",
                        "example": "somepassword"
                    }
                },
                "type": "object"
            },
            "StoreFavoriteItemsVirtualBody": {
                "title": "Store favorite items request",
                "description": "Store favorite items request body data",
                "required": [
                    "favorite_items"
                ],
                "properties": {
                    "favorite_items": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "product_id": {
                                    "title": "Product id",
                                    "description": "product id",
                                    "type": "integer",
                                    "example": 1
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "StoreItemsToBucketVirtualBody": {
                "title": "Store items to bucket request",
                "description": "Store items to bucket request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "bucket_items": {
                        "title": "bucket_items",
                        "description": "bucket items",
                        "type": "json",
                        "example": [
                            {
                                "product_id": 1,
                                "qty": 3
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "UpdateItemInBucketVirtualBody": {
                "title": "Update item in bucket request",
                "description": "Update item in request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "qty": {
                        "title": "qty",
                        "description": "new qty",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "UpdateProductVirtualBody": {
                "title": "Update product example",
                "description": "Update product body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the new product",
                        "type": "string",
                        "example": "belt"
                    },
                    "cost": {
                        "title": "cost",
                        "description": "Cost of the new product",
                        "type": "integer",
                        "example": "200"
                    },
                    "amount": {
                        "title": "amount",
                        "description": "Amount of the new product",
                        "type": "integer",
                        "example": "12"
                    },
                    "description": {
                        "title": "description",
                        "description": "Description of the new product",
                        "type": "string",
                        "example": "some description"
                    },
                    "content": {
                        "title": "content",
                        "description": "Content of the new product",
                        "type": "json",
                        "example": {
                            "width": 40,
                            "color": "blue",
                            "length": "100",
                            "gender": "male",
                            "belt_type": "classic",
                            "clasp_type": "classic"
                        }
                    },
                    "status_id": {
                        "title": "status_ids",
                        "description": "Identifiers of statuses for the new product",
                        "type": "integer",
                        "example": 1
                    },
                    "category_ids": {
                        "title": "category_ids",
                        "description": "Identifiers of categories for the new product",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "example": [
                            1
                        ]
                    },
                    "image[]": {
                        "title": "image",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "binary"
                        }
                    },
                    "images_content": {
                        "title": "images_content",
                        "description": "images_content of the new product",
                        "type": "json",
                        "example": {
                            "": 40,
                            "color": "blue",
                            "length": "100",
                            "gender": "male",
                            "belt_type": "classic",
                            "clasp_type": "classic"
                        }
                    },
                    "meta_title": {
                        "title": "Meta title",
                        "type": "string",
                        "example": "meta title"
                    },
                    "meta_description": {
                        "title": "Meta description",
                        "type": "string",
                        "example": "meta description"
                    },
                    "meta_keywords": {
                        "title": "Meta keywords",
                        "type": "string",
                        "example": "meta keywords"
                    },
                    "banner_image": {
                        "title": "Banner image",
                        "type": "string",
                        "example": "banner image"
                    },
                    "published": {
                        "title": "published",
                        "description": "published or not banner",
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "UpdateUserVirtualBody": {
                "title": "Update user data request",
                "description": "Update user data request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "User's name",
                        "type": "string",
                        "example": "name"
                    },
                    "surname": {
                        "title": "surname",
                        "description": "User's surname",
                        "type": "string",
                        "example": "surname"
                    },
                    "avatar": {
                        "title": "avatar",
                        "description": "User's avatar",
                        "type": "string",
                        "example": "avatar"
                    },
                    "phone": {
                        "title": "phone",
                        "description": "User's phone",
                        "type": "string",
                        "example": "phone"
                    },
                    "country": {
                        "title": "country",
                        "description": "User's country",
                        "type": "string",
                        "example": "country"
                    },
                    "city": {
                        "title": "city",
                        "description": "User's city",
                        "type": "string",
                        "example": "city"
                    },
                    "state": {
                        "title": "state",
                        "description": "User's state",
                        "type": "string",
                        "example": "state"
                    },
                    "apartment": {
                        "title": "apartment",
                        "description": "User's apartment",
                        "type": "string",
                        "example": "apartment"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "name": "bearerAuth",
                "in": "header",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "security": [
        []
    ]
}